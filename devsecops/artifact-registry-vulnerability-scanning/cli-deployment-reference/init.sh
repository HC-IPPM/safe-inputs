# Get Artifact Registry Vunerabilities - Set up and Deployment

#   This will enable picking up vunerabilities detected in the Artifact Registry, and push 
#   to a Google Cloud Storage bucket using a pubsub topic to pick up occurances and filter them through a Cloud Function.

#   In the safe-inputs project, the following resources are provisioned with [Config Connector in acm-core](https://github.com/PHACDataHub/acm-core), 
#   but first worked out with gcloud commands in a non-safe-inputs project to ensure which resources and permissions to provision. 

# REFERENCES:
#   https://medium.com/google-cloud/centrally-managing-artifact-registry-container-image-vulnerabilities-on-google-cloud-part-one-d86fb4791601
#   https://cloud.google.com/run/docs/tutorials/eventarc-functions

# ---- SET ENV VARIABLES - modify with your own in the README.md and run (or uncomment and change here)
# # lilakcc project
# PROJECT_ID=phx-01jcqzx71nn
# PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format="value(projectNumber)")
# BUCKET_NAME=phx-01jcqzx71nn1-bucket-of-risk
# VULN_CLOUD_FUNCTION_SERVICE_ACCOUNT=phx-01jcqzx71nn-vuln-gcf
# REPO_NAME=phx-01jcqzx71nn-repo-of-risk
# REGION=northamerica-northeast1

# ---- SET PROJECT ---- (to the test project you are using))
gcloud config set project $PROJECT_ID

# ----- ENABLE SERVICES ---- 
#   artifact registry, scanning of registry, visibiliity into metadata (occurances) and cloudbuild
#   event-driven serverless (cloud run) function, and storage to store results in bucket 
gcloud services enable cloudresourcemanager.googleapis.com \
    artifactregistry.googleapis.com \
    cloudbuild.googleapis.com \
    eventarc.googleapis.com \
    run.googleapis.com \
    storage.googleapis.com \
    pubsub.googleapis.com \
    containeranalysis.googleapis.com \
    cloudkms.googleapis.com \
    cloudfunctions.googleapis.com \
    containerscanning.googleapis.com

# # To check which services have been enabled 
# gcloud services list --enabled

# # To disable service (Note - this doesn't seem to also remove the associated auto-google-generated service accounts made on creation)
# gcloud services disable cloudresourcemanager.googleapis.com \
#     artifactregistry.googleapis.com \
#     cloudbuild.googleapis.com \
#     eventarc.googleapis.com \
#     run.googleapis.com \
#     storage.googleapis.com \
#     pubsub.googleapis.com \
#     containeranalysis.googleapis.com \
#     cloudkms.googleapis.com \
#     cloudfunctions.googleapis.com \
#     containerscanning.googleapis.com


# ----- CREATE BUCKET---- to store vunerablity occurances 
gsutil mb -l northamerica-northeast1 -p $PROJECT_ID gs://$BUCKET_NAME

# ---- IAM ----
# Service account the cloud function runs under
gcloud iam service-accounts create $VULN_CLOUD_FUNCTION_SERVICE_ACCOUNT \
--description="Service Account to create process image scan vulnerabilities" \
--display-name="Image Vulnerability Processor"

# Add Container Analysis Occurrences Viewer role to service account 
# https://cloud.google.com/functions/docs/concepts/iam
gcloud projects add-iam-policy-binding $PROJECT_ID \
    --member=serviceAccount:$VULN_CLOUD_FUNCTION_SERVICE_ACCOUNT@$PROJECT_ID.iam.gserviceaccount.com \
    --role=roles/containeranalysis.occurrences.viewer \
    --role=roles/cloudfunctions.serviceAgent

# And add Object Creator role to vuln sa (on bucket we just created) 
gsutil iam ch serviceAccount:$VULN_CLOUD_FUNCTION_SERVICE_ACCOUNT@$PROJECT_ID.iam.gserviceaccount.com:objectCreator gs://$BUCKET_NAME


# # ---- CREATE PUBSUB TOPIC ----
# # (Strangely needed to do this when first gclouding the resources (and this step was in the tutorial), 
# # but perhaps I hadn't enabled vunerability scanning on the artifact registry, as when using acm-core, this wasn't needed)
# gcloud pubsub topics create container-analysis-occurrences-v1 --project=$PROJECT_ID

# ---- DEPLOY CLOUD FUNCTION ---- (this will be done with cloud build in the future)
#   Node (https://cloud.google.com/sdk/gcloud/reference/functions/deploy)
# changed to cloud run (https://cloud.google.com/blog/products/serverless/google-cloud-functions-is-now-cloud-run-functions)
# Need to change like this: https://cloud.google.com/run/docs/tutorials/eventarc-functions 
# We're changing the runtime service account to the user-defined one, otherwise it will use default compute service account (https://cloud.google.com/functions/docs/securing/function-identity)

gcloud functions deploy imageVulnPubSubHandler \
    --gen2 \
    --source=./cloud-function \
    --runtime=nodejs18 \
    --trigger-topic=container-analysis-occurrences-v1 \
    --entry-point=imageVulnPubSubHandler \
    --set-env-vars=BUCKET_NAME=$BUCKET_NAME \
    --region=northamerica-northeast1 \
    --service-account $VULN_CLOUD_FUNCTION_SERVICE_ACCOUNT@$PROJECT_ID.iam.gserviceaccount.com

# ---- TEST ---- by pushing image with vunerabilities
# Create Artifact Registry Repo to store image (we don't need to do this as there's one already in Safe inputs)
gcloud artifacts repositories create $REPO_NAME \
 --location=northamerica-northeast1 \
 --repository-format=docker  \
 --project=$PROJECT_ID

# Push image with vunerabilities to test (nginx) (nginx - ie the Dockerfile in this dir) to Artifact Registry to test
gcloud auth configure-docker northamerica-northeast1-docker.pkg.dev
docker pull nginx
docker tag nginx northamerica-northeast1-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/nginx
docker push northamerica-northeast1-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/nginx



