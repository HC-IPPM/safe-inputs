const { ContainerAnalysisClient } = require('@google-cloud/containeranalysis');
const functions = require('@google-cloud/functions-framework');
// const { processVulnerability } = require('./src/processVunerability.js');
const { writeVulnToBucket } = require('./src/writeVulnToBucket.js');
const { processOccurrence } = require('./src/processOccurance.js');

const containerAnalysisClient = new ContainerAnalysisClient();

exports.imageVulnPubSubHandler = async (event, context) => {
  try {
    // Decode the base64-encoded pubsub data and parse it as JSON (this is the metadata)
    const decodedData = Buffer.from(event.data, 'base64').toString('utf-8');
    const data = JSON.parse(decodedData);

    // Get bucketName
    const bucketName =
      process.env.BUCKET_NAME || 'safe-inputs-devsecops-outputs-for-dashboard';
    if (!bucketName) {
      console.error('Bucket name not set');
      return;
    }

    // Get the occurrence info using the Grafeas client (from data.name)
    const occurrenceName = data.name;
    const grafeasClient = containerAnalysisClient.getGrafeasClient();
    const [occurrence] = await grafeasClient.getOccurrence({
      name: occurrenceName,
    });

    // We're only interested in the 'vunerability' type - filter for these then process and save to bucket
    switch (occurrence.kind) {
      case 'VULNERABILITY':
        console.log('VULNERABILITY occurrence');
        try {
          const { vulnId, affectedPackage, affectedVersion, resourceName } = await processOccurrence(occurrence);
          // const { vulnOccurrence, occurenceFilename } = await processVulnerability(occurrence);
          await writeVulnToBucket(
            bucketName,
            // JSON.stringify(vulnOccurrence),
            JSON.stringify(occurrence),
            vulnId,
            affectedPackage,
            affectedVersion,
            resourceName)
            // occurenceFilename)
          } catch (error) {
            console.log('Error processing vunerability:', error)
          }
      default:
        console.log(`Unhandled occurrence kind: ${occurrence.kind}`);
        console.log(`Full occurrence data: ${JSON.stringify(occurrence)}`);
        break;
    }
  } catch (error) {
    console.error('Error processing event:', error);
  }
};
