const { ContainerAnalysisClient } = require('@google-cloud/containeranalysis');
const functions = require('@google-cloud/functions-framework');
const { writeVulnToBucket } = require('./src/writeVulnToBucket.js');
const { processOccurrence } = require('./src/processOccurrence.js');
const { getVulnFilename } = require('./src/getVulnFilename.js');

const containerAnalysisClient = new ContainerAnalysisClient();

exports.imageVulnPubSubHandler = async (event, context) => {
  try {
    // Decode the base64-encoded pubsub data and parse it as JSON (this is the metadata)
    const decodedData = Buffer.from(event.data, 'base64').toString('utf-8');
    const data = JSON.parse(decodedData);

    // Get bucketName
    const bucketName =
      process.env.BUCKET_NAME || 'safe-inputs-devsecops-outputs-for-dashboard';

    // Get the occurrence info using the Grafeas client (from data.name)
    const occurrenceName = data.name;
    const grafeasClient = containerAnalysisClient.getGrafeasClient();
    const [occurrence] = await grafeasClient.getOccurrence({
      name: occurrenceName,
    });

    // Process occurances of 'VULNERABILITY' type
    if (occurrence.kind === 'VULNERABILITY') {
      const processedOccurrence = await processOccurrence(occurrence);

      await Promise.allSettled(
        processedOccurrence.affectedPackages.map((affectedPackage) =>
          writeVulnToBucket(
            bucketName,
            processedOccurrence.text,
            getVulnFilename(processedOccurrence, affectedPackage),
          ),
        ),
      );
    }
  } catch (error) {
    console.error('Error processing event:', error);
  }
};
