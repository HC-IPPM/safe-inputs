const { ContainerAnalysisClient } = require('@google-cloud/containeranalysis');
const functions = require('@google-cloud/functions-framework');
const { processVulnerability } = require('./src/process-vunerability.js');

const containerAnalysisClient = new ContainerAnalysisClient();

exports.imageVulnPubSubHandler = async (event, context) => {
  try {
    // Decode the base64-encoded pubsub data and parse it as JSON (this is the metadata)
    const decodedData = Buffer.from(event.data, 'base64').toString('utf-8');
    const data = JSON.parse(decodedData);

    // Get bucketName
    const bucketName =
      process.env.BUCKET_NAME || 'safe-inputs-devsecops-outputs-for-dashboard';
    if (!bucketName) {
      console.error('Bucket name not set');
      return;
    }

    // Get the occurrence info using the Grafeas client (from data.name)
    const occurrenceName = data.name;
    const grafeasClient = containerAnalysisClient.getGrafeasClient();
    const [occurrence] = await grafeasClient.getOccurrence({
      name: occurrenceName,
    });

    // We're only interested in vunerability types - filter for these and process (which includes saving to bucket)
    //  Using others for logging - can remove in future.
    switch (occurrence.kind) {
      case 'VULNERABILITY':
        console.log('VULNERABILITY occurrence');
        await processVulnerability(occurrence, bucketName);
        break;
      case 'PACKAGE':
        console.log('PACKAGE occurance');
        break;
      case 'DISCOVERY':
        console.log('DISCOVERY occurrence');
        break;
      default:
        console.log(`Unhandled occurrence kind: ${occurrence.kind}`);
        console.log(`Full occurrence data: ${JSON.stringify(occurrence)}`);
        break;
    }
  } catch (error) {
    console.error('Error processing event:', error);
  }
};
