const { ContainerAnalysisClient } = require('@google-cloud/containeranalysis');
const functions = require('@google-cloud/functions-framework');
const { writeVulnToBucket } = require('./src/writeVulnToBucket.js');
const { processOccurrence } = require('./src/processOccurance.js');
const { getVulnFilename } = require('./src/getVulnFilename.js');

const containerAnalysisClient = new ContainerAnalysisClient();

exports.imageVulnPubSubHandler = async (event, context) => {
  try {
    // Decode the base64-encoded pubsub data and parse it as JSON (this is the metadata)
    const decodedData = Buffer.from(event.data, 'base64').toString('utf-8');
    const data = JSON.parse(decodedData);

    // Get bucketName
    const bucketName =
      process.env.BUCKET_NAME || 'safe-inputs-devsecops-outputs-for-dashboard';

    // Get the occurrence info using the Grafeas client (from data.name)
    const occurrenceName = data.name;
    const grafeasClient = containerAnalysisClient.getGrafeasClient();
    const [occurrence] = await grafeasClient.getOccurrence({
      name: occurrenceName,
    });

    // Process occurances of 'VULNERABILITY' type
    if (occurrence.kind === 'VULNERABILITY') {
      console.log('***************************VULNERABILITY occurrence....');
      console.log('full occurrence: ', JSON.stringify(occurrence, null, 4));
      const processedOccurrence = await processOccurrence(occurrence);
      const { text, vulnId, resourceName } = processedOccurrence;

      // Map valid affected packages to upload tasks ** not sure this is needed - need to first ensure one-to-one
      const uploadTasks = processedOccurrence.validAffectedPackages.map(
        (affectedPackage) => {
          const filename = getVulnFilename(
            processedOccurrence,
            affectedPackage,
          );
          return writeVulnToBucket(bucketName, text, filename);
        },
      );

      // Run all upload tasks in parallel
      const results = await Promise.allSettled(uploadTasks);

      // Log upload results
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          console.log(`Upload succeeded for package ${index}`);
        } else {
          console.error(`Upload failed for package ${index}:`, result.reason);
        }
      });
    }
  } catch (error) {
    console.error('Error processing event:', error);
  }
};
