// processOccurence could return{vulnId, resourceName, text}
// vulnId and resourceName as above, and text as the content to be written to the file (so JSON.stringify(occurrence))

// could maybe perform checks and throw an error if the provided occurrence has missing or invalid information, 
// no point continuing or writing everything if the occurence is invalid

const processOccurrence = async (occurrence) => {
    const vulnId = occurrence.noteName.split('/').pop();
    const resourceName = occurrence.resourceUri.split('/').pop();
  
    for (const issue of occurrence.vulnerability.packageIssue) {
      try {
        const affectedPackage = issue.affectedPackage;
        const affectedVersion = issue.affectedVersion.name;
        return { vulnId, affectedPackage, affectedVersion, resourceName }

      } catch (issueError) {
        console.error(`Error processing issue ${issue}:`, issueError);
      }
    }
  };
  
  module.exports = { processOccurrence };
  