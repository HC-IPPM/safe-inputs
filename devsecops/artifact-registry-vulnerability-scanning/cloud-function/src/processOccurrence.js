// processOccurence could return{vulnId, resourceName, text}
// vulnId and resourceName as above, and text as the content to be written to the file (so JSON.stringify(occurrence))

// could maybe perform checks and throw an error if the provided occurrence has missing or invalid information,
// no point continuing or writing everything if the occurence is invalid

const { getAffectedPackages } = require('./getAffectedPackages.js');

const processOccurrence = async (occurrence) => {
  // fileName = getVulnFileName =
  const vulnId = occurrence.noteName.split('/').pop();

  // Extract SHA
  const sha256Match = occurrence.resourceUri.match(/sha256:([a-fA-F0-9]{64})/);
  const shortSha = sha256Match ? sha256Match[1].slice(0, 12) : null;
  if (!shortSha) {
    throw new Error(
      'Invalid occurrence: missing or malformed SHA256 in resourceUri',
    );
  }

  const fullResourceName = occurrence.resourceUri.split('/').pop(); // image@sha256:fullSHA
  const imageName = fullResourceName.split('@')[0];
  const resourceName = `${imageName}@sha256:${shortSha}`;

  // Extract valid affected packages
  const affectedPackages = await getAffectedPackages(
    occurrence.vulnerability.packageIssue,
  );

  // check occurrence
  if (!vulnId || !resourceName || !affectedPackages.length) {
    throw new Error(
      `Invalid occurrence: missing required fields: ${occurrence}`,
    );
  }
  const text = JSON.stringify(occurrence);
  return { vulnId, resourceName, affectedPackages, text };
};

module.exports = { processOccurrence };
