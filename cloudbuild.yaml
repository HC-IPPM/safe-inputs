steps:
  - id: 'Install dependencies'
    name: 'node:lts-alpine3.19@sha256:2d8c24d9104bda27e07dced6d7110aa728dd917dde8255d8af3678e532b339d6'
    entrypoint: 'npm'
    dir: ./
    args: ['ci'] # assumes postinstall script in the root level package.json to also install the sub-directory dependencies

  - id: 'Prettier check'
    name: 'node:lts-alpine3.19@sha256:2d8c24d9104bda27e07dced6d7110aa728dd917dde8255d8af3678e532b339d6'
    entrypoint: 'npm'
    dir: ./
    args: ['run', 'prettier']

  - id: 'Eslint check'
    name: 'node:lts-alpine3.19@sha256:2d8c24d9104bda27e07dced6d7110aa728dd917dde8255d8af3678e532b339d6'
    entrypoint: 'npm'
    dir: ./
    args: ['run', 'eslint:ci'] # currently allowing warnings, but could be tightened up post https://github.com/PHACDataHub/safe-inputs/issues/144

  - id: 'GraphQL Codegen check'
    name: 'gcr.io/cloud-builders/docker'
    dir: ./
    script: |
      #!/bin/bash
      set -o errexit
      set -o pipefail
      set -o nounset

      GRAPHQL_ENDPOINT_URL=http://localhost:3000/api/graphql

      # docker compose dev environment, detached mode, with the unnecessary services disabled
      docker compose -f ./docker-compose.dev.yaml up --detach --scale gateway=0 --scale seed-dev-data=0 --scale ui-gql-codegen=0 --scale ui=0

      # wait for the graphql endpoint to be responding before continuing
      until node -e \"fetch(process.env.GRAPHQL_ENDPOINT_URL).then(({status}) => process.exit(status === 200 ? 0 : 1)).catch(() => process.exit(1))\"; do
        echo "Waiting for api service..."
        sleep 2
      done

      npm run gql-codegen:check

      docker compose -f ./docker-compose.dev.yaml down

options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
