version: '3.8'

networks:
  host-loopback:
    driver: bridge
    driver_opts:
      # the default docker bridge driver behaviour is to bind exposed ports on 0.0.0.0, making them accessible
      # from the local network. Not good, unless you're on a known-safe network (ha) and specifically want to
      # serve dev traffic from other local devices (e.g. testing on mobile devices).
      # Configuring this network to bind on loopback instead, so that only incoming traffic from the host machine
      # can reach our containers on their dev ports
      com.docker.network.bridge.host_binding_ipv4: '127.0.0.1'
  db-internal:
    # the DB can stay isolated, doesn't need to talk to the internet like the api and ui (which need to reach NPM)
    # and doesn't need to be reachable from the host machine (use `npm run dev:mongosh` when a mongo shell is needed)
    driver: bridge
    internal: true

configs:
  gateway.default.conf:
    # Note: double $'s (`$$`) below are escaped single $'s, to avoid docker compose variable interpolation
    content: |
      server {
          location / {
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;

              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";
              
              proxy_pass http://ui:8080;

              # This part's important. UI URIs are a mix of static content resources on the server and SPA routes.
              # If the dev server doesn't have a resource, then it must be assumed that URI is actually an SPA route,
              # so replace UI server 404's with the index.html, to load the SPA and let it handle the route client side.
              # In prod, the UI container itself runs nginx with an equivalent config (using `try_file`, but that's not
              # an option when proxying). Direct requests to the rspack dev server also work as expected by default, but
              # not when proxied through nginx like this (nginx layers in its own 404 response by default)
              proxy_intercept_errors on;
              error_page 404 = /index.html;
          }

          location /api {
              proxy_set_header Host $$host;
              proxy_set_header X-Real-IP $$remote_addr;
              proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $$scheme;
              
              # WebSocket support
              proxy_http_version 1.1;
              proxy_set_header Upgrade $$http_upgrade;
              proxy_set_header Connection "upgrade";

              proxy_pass http://api:3000;
          }
      }

services:
  gateway:
    # equivalent in behaviour to the prod k8s gateway configuration,
    # routes /api/* to the api server and everything else to the ui
    image: nginx@sha256:d2eb56950b84efe34f966a2b92efb1a1a2ea53e7e93b94cdf45a27cf3cd47fc0
    tty: ${DOCKER_TTY:-true}
    restart: always
    networks:
      - host-loopback
    ports:
      - '8080:80'
    configs:
      - source: gateway.default.conf
        target: /etc/nginx/conf.d/default.conf

  db: # TODO: for better prod parity (use transactions in dev, etc), need to figure out mongo replica sets some times
    image: mongo:6.0@sha256:28bf77ff23511baafb3262d7e6f5ae3634e784662e147ef4f6950a07a43c5eab # keep on same major version as k8s mongo, seems to be 6 currently
    tty: ${DOCKER_TTY:-true} # allocating a tty lets control character print (so, retains useful colour coding etc), but displays poorly in some cases (GCP cloudbuild logs)
    restart: always
    volumes:
      - ./api/dev-db-init.js:/docker-entrypoint-initdb.d/dev-db-init.js:ro
    env_file:
      - ./api/.env.dev-public
    networks:
      - db-internal
    ports:
      - 27017:27017
    command: mongod --quiet

  seed-dev-data:
    image: safe-inputs-api:1.2
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      dockerfile: ./Dockerfile.node-dev
      context: ./
    volumes:
      - ./api:/home/node-dev/project
      - ./api/.env.dev-public:/home/node-dev/project/.env
    entrypoint:
      - ../node-dev-entrypoint.once.sh
    command: npm run seed-dev-data:${DOCKER_API_COMMAND:-docker} # 'docker' or 'docker-debug'
    networks:
      - db-internal
      - host-loopback
    ports:
      - 9228:9228 # for the node debug server, when active
    depends_on:
      - db

  api:
    image: node-dev:1.0
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      dockerfile: ./Dockerfile.node-dev
      context: ./
    volumes:
      - ./api:/home/node-dev/project
      - ./api/.env.dev-public:/home/node-dev/project/.env
    command: npm run dev:${DOCKER_API_COMMAND:-docker} # 'docker' or 'docker-debug'
    networks:
      - db-internal
      - host-loopback
    ports:
      - 3000:3000
      - 9229:9229 # for the node debug server, when active
    depends_on:
      - seed-dev-data

  ui-gql-codegen:
    image: node-dev:1.0
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      dockerfile: ./Dockerfile.node-dev
      context: ./
    # has to run as root to be able to write generated types back to the host. TODO: _maybe_
    # avoidable with fixuid, but generally fixing docker to host file permissions is a nightmare
    user: root
    volumes:
      # to balance for running as root, only the target directory for the generated types is writable
      - ./:/home/node-dev/project:ro
      - ./ui/src/graphql/__generated__:/home/node-dev/project/ui/src/graphql/__generated__:rw
    environment:
      - GRAPHQL_ENDPOINT_URL=http://api:3000/api/graphql
    command: npm run gql-codegen:${DOCKER_GQL_CODEGEN_COMMAND:-watch} # 'watch' or 'check'
    networks:
      - host-loopback
    depends_on:
      - api

  ui:
    image: node-dev:1.0
    tty: ${DOCKER_TTY:-true}
    restart: always
    build:
      dockerfile: ./Dockerfile.node-dev
      context: ./
    volumes:
      - ./ui:/home/node-dev/project
      - ./ui/.env.dev-public:/home/node-dev/project/.env
    environment:
      - GRAPHQL_API_URL=http://gateway/api/graphql
    command: npm run dev
    networks:
      - host-loopback
    ports:
      - 8000:8080
    depends_on:
      - ui-gql-codegen
