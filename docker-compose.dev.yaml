version: '3.8'

volumes:
  db:
    driver: local

networks:
  dev-loopback:
    driver: bridge
    driver_opts:
      # the default docker bridge driver behaviour is to bind exposed ports on 0.0.0.0, making them accessible
      # from the local network. Not good, unless you're on a known-safe network (ha) and specifically want to
      # serve dev traffic from other local devices (e.g. testing on mobile devices).
      # Configuring this network to bind on loopback instead, so that only incoming traffic from the host machine
      # can reach our containers on their dev ports
      com.docker.network.bridge.host_binding_ipv4: '127.0.0.1'
  db:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: '127.0.0.1'

services:
  db:
    image: mongo:6.0 # keep on same major version as k8s mongo, seems to be 6 currently
    restart: always
    volumes:
      - db:/data/db
      - ./api/dev-db-init.js:/docker-entrypoint-initdb.d/dev-db-init.js
    env_file:
      - ./api/.env.dev-public
    networks:
      - db
    ports:
      - 27017:27017

  api:
    image: api:1.0
    build:
      dockerfile: ./node-dev.dockerfile
      context: ./
    volumes:
      - ./api:/home/node-dev/project
    env_file:
      - ./api/.env.dev-public
    command: npm run dev
    #command: npm run dev:debug-docker
    networks:
      - db
      - dev-loopback
    ports:
      - 3000:3000
      - 9229:9229 # for the node debug server, when active
    depends_on:
      - db

  ui:
    image: ui:1.0
    build:
      dockerfile: ./node-dev.dockerfile
      context: ./
    volumes:
      - ./ui:/home/node-dev/project
    env_file:
      - ./ui/.env.dev-public
    command: npm run dev
    networks:
      - dev-loopback
    ports:
      - 8080:8080
    depends_on:
      - api
