steps:
  - id: install
    name: 'node:lts-alpine3.19@sha256:40dc4b415c17b85bea9be05314b4a753f45a4e1716bb31c01182e6c53d51a654'
    dir: api
    entrypoint: npm
    args: ['ci', '--no-optional']

  - id: 'Check types'
    name: 'node:lts-alpine3.19@sha256:40dc4b415c17b85bea9be05314b4a753f45a4e1716bb31c01182e6c53d51a654'
    dir: api
    entrypoint: npm
    args: ['run', 'typecheck']

  - id: 'Run tests'
    name: 'gcr.io/cloud-builders/docker@sha256:8a9bff005803926fbc760f9528b708c259ac170b5e93082a9c2342a731945f66'
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      # Create the coverage directory 
      mkdir -p /workspace/coverage
      chmod -R 777 /workspace/coverage

      # disable TTY output for the compose environment, the ansi characters printed when a TTY is attached
      # are just junk characters to the GCP cloudbuild logs
      DOCKER_NETWORK=cloudbuild DOCKER_TTY=false docker compose -f api/docker-compose.dev-test.yaml up --exit-code-from api-test

      # List the coverage directory contents to confirm files exist
      echo "Listing files in /workspace/coverage:"
      ls -la /workspace/coverage

  - id: 'Upload test coverage report to bucket'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    dir: api
    name: 'gcr.io/cloud-builders/docker@sha256:8a9bff005803926fbc760f9528b708c259ac170b5e93082a9c2342a731945f66'
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      # Install jq and bc
      apt-get update && apt-get install -y jq bc

      # Generate a timestamp
      export timestamp=$(date +%s)

      # Get the last commit's coverage report from GCS
      echo "Getting last commit's test coverage report..."
      last_commit_on_this_branch=$(gsutil ls gs://safe-inputs-devsecops-outputs-for-dashboard/test-coverage/api/ | grep "$BRANCH_NAME" | sort | tail -n 1)

      # If this isn't the first commit on this branch, then determine test coverage trend 
      if [ "$last_commit_on_this_branch" ]; then
          
        # Download the last coverage report in order to be able to use jq to search
        gsutil cp "$last_commit_on_this_branch" last_commit_coverage.json

        # Extract current and last coverage percentages
        this_coverage=$(jq -r '.total.statements.pct' /workspace/coverage/coverage-summary.json)
        last_coverage=$(jq -r '.total.statements.pct' last_commit_coverage.json)

        # Compare coverage
        echo "Current coverage: $this_coverage%"
        echo "Last coverage: $last_coverage%"
        coverage_difference=$(echo "$this_coverage - $last_coverage" | bc)
        echo "Coverage difference: $coverage_difference%"

        echo "Apending report with the coverage difference..."
        jq ". + {\"difference_from_last_commit\": {\"statements_pct\": $coverage_difference}}" /workspace/coverage/coverage-summary.json > /workspace/coverage/updated-coverage-summary.json
        mv /workspace/coverage/updated-coverage-summary.json  /workspace/coverage/coverage-summary.json

      else
        echo "No previous coverage reports found on this branch."
        echo "Skipping coverage trend calculations."
      fi

      echo "formating file..."
      jq '.' /workspace/coverage/coverage-summary.json > /workspace/coverage/coverage-pretty.json

      echo "Copying coverage report to GCS bucket..."
      gsutil -m cp -r /workspace/coverage/coverage-pretty.json gs://safe-inputs-devsecops-outputs-for-dashboard/test-coverage/api/${BRANCH_NAME}__${timestamp}__${SHORT_SHA}.json

  - id: generate-image-name
    name: 'gcr.io/cloud-builders/docker@sha256:8a9bff005803926fbc760f9528b708c259ac170b5e93082a9c2342a731945f66'
    entrypoint: 'bash'
    dir: api
    args:
      - '-c'
      - |
        echo "northamerica-northeast1-docker.pkg.dev/${PROJECT_ID}/phx-01j1tbke0ax-safeinputs/api:$BRANCH_NAME-$SHORT_SHA-$(date +%s)" > /workspace/imagename

  - name: 'gcr.io/cloud-builders/docker@sha256:8a9bff005803926fbc760f9528b708c259ac170b5e93082a9c2342a731945f66'
    id: build-if-main
    entrypoint: 'bash'
    dir: api
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "main" ]]
        then
          image=$(cat /workspace/imagename)
          docker build -t $image -f ./Dockerfile.prod .
        else
          exit 0
        fi

  - id: push-if-main
    name: 'gcr.io/cloud-builders/docker@sha256:8a9bff005803926fbc760f9528b708c259ac170b5e93082a9c2342a731945f66'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "main" ]]
        then
          image=$(cat /workspace/imagename)
          docker push $image
        else
          exit 0
        fi
options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
