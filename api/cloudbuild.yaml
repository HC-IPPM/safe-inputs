steps:
  - id: 'Check types'
    name: 'node:lts-alpine3.19@sha256:97f02cbb1c8ef6eefcfb1b1f958c012362758972cf125a99c09bd18b26a716c9'
    entrypoint: 'sh'
    dir: api
    args:
      - '-c'
      - |
        npm ci && npm run typecheck

  - id: 'Run tests'
    name: 'gcr.io/cloud-builders/docker@sha256:b98c8f37c8801d00db61f4388e1e7c801efe6eb76bebe5f0023312924f933379'
    script: |
      #!/usr/bin/env bash
      set -o errexit
      set -o pipefail
      set -o nounset

      # disable TTY output for the compose environment, the ansi characters printed when a TTY is attached
      # are just junk characters to the GCP cloudbuild logs
      DOCKER_NETWORK=cloudbuild DOCKER_TTY=false docker compose -f api/docker-compose.dev-test.yaml up --exit-code-from api-test

  - name: 'gcr.io/cloud-builders/docker@sha256:b98c8f37c8801d00db61f4388e1e7c801efe6eb76bebe5f0023312924f933379'
    id: generate-image-name
    entrypoint: 'bash'
    dir: api
    args:
      - '-c'
      - |
        echo "northamerica-northeast1-docker.pkg.dev/${PROJECT_ID}/safeinputs/api:$BRANCH_NAME-$SHORT_SHA-$(date +%s)" > /workspace/imagename

  - name: 'gcr.io/cloud-builders/docker@sha256:b98c8f37c8801d00db61f4388e1e7c801efe6eb76bebe5f0023312924f933379'
    id: build-if-test-branch
    entrypoint: 'bash'
    dir: api
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "test-cloudbuild-changes" ]]
        then
          image=$(cat /workspace/imagename)
          docker build -t $image -f ./Dockerfile.prod .
        else
          exit 0
        fi

  - name: 'gcr.io/cloud-builders/docker@sha256:b98c8f37c8801d00db61f4388e1e7c801efe6eb76bebe5f0023312924f933379'
    id: push-if-test-branch
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [[ "$BRANCH_NAME" == "test-cloudbuild-changes" ]]
        then
          image=$(cat /workspace/imagename)
          docker push $image
        else
          exit 0
        fi

  - id: 'Vulnerability Scanning'
    name: 'aquasec/trivy:latest'
    entrypoint: 'trivy'
    args: ['image', '$_IMAGE']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'tag-and-push'
    script: |
      #!/bin/sh
      set -e
      docker build -t $_IMAGE .
      docker push "$_IMAGE"
      docker inspect $_IMAGE --format "$_IMAGE@{{.Id}}" >image_with_digest

  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'generate-token'
    script: |
      #!/bin/sh
      set -e
      gcloud auth print-identity-token --audiences=sigstore > token

  - name: 'gcr.io/cloud-builders/docker'
    id: 'sign-image'
    script: |
      #!/bin/sh
      set -e
      docker run \
      --network=cloudbuild \
      --mount source=home-volume,target=/builder/home \
      --rm \
      -e SIGSTORE_NO_CACHE=true \
      -e HOME=/builder/home \
      gcr.io/projectsigstore/cosign \
      sign --identity-token=$(cat token) $(cat image_with_digest) -y

artifacts:
  images:
  - $_IMAGE

substitutions:
  _IMAGE: 'northamerica-northeast1-docker.pkg.dev/${PROJECT_ID}/safeinputs/api:$BRANCH_NAME-$SHORT_SHA-$(date +%s)'
  _SERVICE_ACCOUNT_ID: 'SERVICE_ACCOUNT_ID'
  _SERVICE_ACCOUNT: 'projects/${PROJECT_ID}/serviceAccounts/${_SERVICE_ACCOUNT_ID}'

options:
  env:
  - '_IMAGE=$_IMAGE'
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET

