version: '3.8'

networks:
  host-loopback-test:
    driver: bridge
    driver_opts:
      # the default docker bridge driver behaviour is to bind exposed ports on 0.0.0.0, making them accessible
      # from the local network. Not good, unless you're on a known-safe network (ha) and specifically want to
      # serve dev traffic from other local devices (e.g. testing on mobile devices).
      # Configuring this network to bind on loopback instead, so that only incoming traffic from the host machine
      # can reach our containers on their dev ports
      com.docker.network.bridge.host_binding_ipv4: '127.0.0.1'
  db-internal-test:
    driver: bridge
    # the DB can stay isolated, doesn't need to talk to the internet like the api and ui (which need to reach NPM)
    # and doesn't need to be reachable from the host machine (use `npm run dev:mongosh` when a mongo shell is needed)
    internal: true
  cloudbuild:
    driver: bridge
    # in cloudbuild, the only functioning network is the pre-existing network named `cloudbuild`.
    # For the DB and API to speak to eachother, they both need to connect to this (external) network.
    name: cloudbuild
    external: true

services:
  db-test:
    image: mongo:6.0@sha256:a0f1083f85e29bf177d08fa31ee2faa2f4abd78d6b82ee66aa9ced280848b193 # keep on same major version as k8s mongo, seems to be 6 currently
    tty: ${DOCKER_TTY:-true} # allocating a tty lets control character print (so, retains useful colour coding etc), but displays poorly in some cases (GCP cloudbuild logs)
    restart: always # always reinitialize, with a clean data volume
    volumes:
      - ./dev-db-init.js:/docker-entrypoint-initdb.d/dev-db-init.js:ro
    env_file:
      - ./.env.dev-public
    networks:
      - ${DOCKER_NETWORK:-db-internal-test} # see `cloudbuild` network and comment above
    ports:
      - 27017:27017
    command: mongod --quiet

  api-test:
    image: safe-inputs-api-test:1.0
    tty: ${DOCKER_TTY:-true}
    build:
      dockerfile: ./Dockerfile.node-dev
      context: ../
    volumes:
      - .:/home/node-dev/project
      - ./.env.dev-public:/home/node-dev/project/.env
    entrypoint:
      - ../node-dev-entrypoint.once.sh
    command: npm run jest:${DOCKER_API_COMMAND:-docker}
    networks:
      - ${DOCKER_NETWORK:-db-internal-test}
      - host-loopback-test
    ports:
      - 9229:9229 # for the node debug server, when active
    depends_on:
      - db-test
    links:
      - db-test:db # alias db-test container host name for compatability with .env.dev-public configuration
